/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package go-redis-bloomfilter-module/boomfilter */


#line 1 "cgo-builtin-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

typedef struct { const char *p; ptrdiff_t n; } _GoString_;

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "boomfilter.go"

#include "../redismodule.h"

// 返回long long格式的响应
int replyWithLongLong(RedisModuleCtx *ctx, long long ll);
// 返回错误信息
int replyWithError(RedisModuleCtx *ctx, const char *err);
// 返回字符串信息
int replyWithSimpleString(RedisModuleCtx *ctx, const char *msg);

// 命令的初始化
int initCommonds(RedisModuleCtx *ctx);

// 从RedisModuleString **argv获取参数
RedisModuleString *getArgvString(RedisModuleString **argv, int index);
// 从RedisModuleString中获取字符串
const char *getModuleStringPtr(RedisModuleString *argv, size_t *len);
// 从RedisModuleString中获取整型
int stringToLongLong(const RedisModuleString *str, long long *ll);
// 将*char转为RedisModuleString
RedisModuleString *createString(RedisModuleCtx *ctx, const char *ptr, size_t len);
// long long 转为RedisModuleString
RedisModuleString *createStringFromLongLong(RedisModuleCtx *ctx, long long ll);

// 打开一个RedisModuleKey结构
RedisModuleKey *openKey(RedisModuleCtx *ctx, RedisModuleString *keyname, int mode);
// 关闭RedisModuleKey结构
void closeKey(RedisModuleKey *kp);
// 检查RedisModuleKey中的类型
int keyType(RedisModuleKey *kp);
// Truncate字符串
int stringTruncate(RedisModuleKey *key, size_t newlen);
// Redis Set 方法
int stringSet(RedisModuleKey *key, RedisModuleString *str);
// Redis Get 方法(只读)
char *stringGet(RedisModuleKey *key, size_t *len);
// Redis Del 方法
int delKey(RedisModuleKey *key);
// 获取hash字典的key数量
size_t getHashLength(RedisModuleKey *key);

// hash set函数
int hashSet(RedisModuleKey *key, int flags, RedisModuleString *vk , RedisModuleString *vv);
// hash get函数
int hashGet(RedisModuleKey *key, int flags, RedisModuleString *vk , RedisModuleString **vv);
// setbit 命令, 使用 RedisModule_Call 实现
RedisModuleCallReply *setBit(RedisModuleCtx *ctx, char *key, char *offset, char *val);
// getbit 命令, 使用 RedisModule_Call 实现
RedisModuleCallReply *getBit(RedisModuleCtx *ctx, char *key, char *offset);
// getReplyType 获取 RedisModuleCallReply 的类型
int getReplyType(RedisModuleCallReply *reply);
// 从 Reply 中获取整型结果
long long getIntegerFromReply(RedisModuleCallReply *reply);


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

typedef _GoString_ GoString;
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


extern int RedisModule_OnLoad(RedisModuleCtx* p0, RedisModuleString** p1, int p2);

// 创建布隆过滤器,及其相关key:
// 布隆过滤器key: {用户输入的key name}
// 保存hash种子的key: boomfilter.{key name}.hashseek.set
// 保存布隆过滤器长度的key: boomfilter.{key name}.total.size
//                       因为布隆过滤器长度是x个bit, 但内存申请是y个byte
// usage: boomfilter.createboomfilter {key name} {hash func count} {filter size}

extern int boomfilterCreate(RedisModuleCtx* p0, RedisModuleString** p1, int p2);

// 删除指定布隆过滤器对应的key
// usage: boomfilter.cleanboomfilter {key}

extern int boomfilterClean(RedisModuleCtx* p0, RedisModuleString** p1, int p2);

// 向指定布隆过滤器添加元素
// usage: boomfilter.add {key} {val}

extern int boomfilterAdd(RedisModuleCtx* p0, RedisModuleString** p1, int p2);

// 查询传入的值是否已经存在于指定的boomfilter中
// usage: boomfilter.exists {key} {val}

extern int boomfilterExists(RedisModuleCtx* p0, RedisModuleString** p1, int p2);

#ifdef __cplusplus
}
#endif
